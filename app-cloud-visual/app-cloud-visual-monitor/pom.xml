<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<groupId>com.application.cloud</groupId>
		<artifactId>app-cloud-visual</artifactId>
		<version>1.0.0-RELEASE</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>app-cloud-visual-monitor</artifactId>
	<description>app-cloud-visual-monitor监控中心</description>
	<packaging>jar</packaging>
	
	<!--配置信息-->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<maven.compiler.encoding>UTF-8</maven.compiler.encoding>
		<maven-compiler-source.version>1.8</maven-compiler-source.version>
		<maven-compiler-target.version>1.8</maven-compiler-target.version>
		<java.version>1.8</java.version>
		<maven.test.skip>true</maven.test.skip>
		
		<!-- 下载需要的 jar  -->
		<downloadSources>true</downloadSources>
	</properties>
	
	<dependencies>
		<!-- SpringBoot Admin -->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-server</artifactId>
			<version>${spring-boot-admin.version}</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui</artifactId>
			<version>${spring-boot-admin.version}</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<version>${spring-boot-admin.version}</version>
		</dependency>
		<!-- SpringCloud Ailibaba Nacos -->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
		</dependency>
		<!-- SpringCloud Ailibaba Nacos Config -->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
		</dependency>
		<!-- SpringCloud Ailibaba Sentinel -->
		<dependency>
			<groupId>com.alibaba.cloud</groupId>
			<artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
		</dependency>
		<!-- SpringBoot Web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
	</dependencies>
	
	
	<!-- 全局环境变量 -->
	<profiles>
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<repositories>
				<repository>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
					<id>maven-snapshot</id>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</repository>
			</repositories>
			<pluginRepositories>
				<pluginRepository>
					<snapshots>
						<enabled>true</enabled>
					</snapshots>
					<id>maven-snapshot</id>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</pluginRepository>
			</pluginRepositories>
		</profile>
		<!-- jdk setting -->
		<profile>
			<id>jdk8</id>
			<activation>
				<jdk>${java.version}</jdk>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<maven.compiler.source>${maven-compiler-source.version}</maven.compiler.source>
				<maven.compiler.target>${maven-compiler-target.version}</maven.compiler.target>
				<maven.compiler.compilerVersion>${java.version}</maven.compiler.compilerVersion>
			</properties>
		</profile>
	</profiles>
	
	<repositories>
		<repository>
			<id>sonatype-nexus-snapshots</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>nexus-aliyun</id>
			<name>Nexus aliyun</name>
			<layout>default</layout>
			<url>http://maven.aliyun.com/nexus/content/groups/public</url>
			<!-- 是否开启快照版构件下载 -->
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<!-- 是否开启发布版构件下载 -->
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>
	
	<!--构建项目的配置-->
	<build>
		<resources>
			<!-- 控制资源文件的拷贝 -->
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.yml</include>
					<include>**/*.xml</include>
					<include>**/*.txt</include>
				</includes>
				<filtering>false</filtering>
				
				<!-- 本地启动注释掉下面一行，打包部署到生产环境则放开下面一行
				<targetPath>${project.build.directory}/config</targetPath>
			-->
			
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>
		<plugins>
			<!-- 设置编译版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${maven-compiler-source.version}</source>
					<target>${maven-compiler-target.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<compilerArguments>
						<verbose />
						<bootclasspath>${java.home}/lib/rt.jar;${java.home}/lib/jce.jar</bootclasspath>
					</compilerArguments>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>com.application.cloud.visual.monitor.AppCloudMonitorApplication</mainClass>
						</manifest>
						<manifestEntries>
							<Class-Path>config/</Class-Path>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- 拷贝依赖的jar包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-lib</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<!-- 打包后的包名是否包含assembly的id名 -->
					<appendAssemblyId>false</appendAssemblyId>
					<!-- 指定最后tar或者zip包的名字 -->
					<finalName>${project.artifactId}-${project.version}</finalName>
					<!-- tar或者zip包的输出目录 -->
					<!-- ../ 是指当前项目的根目录 -->
					<outputDirectory>${project.build.directory}/</outputDirectory>
					<descriptors>
						<!-- 引用的assembly配置文件，可以用多个，即可以同时打包多个格式的包 -->
						<descriptor>src/main/assembly/assembly.xml</descriptor>
					</descriptors>
				</configuration>
				<executions>
					<!-- phase加入package后，则在执行maven package时就可以调用maven-assembly-plugin插件定义的打包方式 -->
					<execution>
						<!--名字任意 -->
						<id>make-assembly</id>
						<!-- 绑定到package生命周期阶段上 -->
						<phase>package</phase>
						<goals>
							<!-- 只运行一次 -->
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>